// <auto-generated />
using System;
using Hotel_Booking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel_Booking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hotel_Booking.Models.Facility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FeatureID");

                    b.ToTable("Facilities", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool?>("AirCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("AirCondition")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("AirportTransfer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("AirportTransfer")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("FontDesk247")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("FontDesk247")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("FreeBreakfast")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("FreeBreakfast")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("FreeParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("FreeParking")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("FreeWifi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("FreeWifi")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<bool?>("LaundryFacility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("LaundryFacility")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("NoSmoking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("NoSmoking")
                        .HasDefaultValueSql("(0)");

                    b.Property<bool?>("Restaurant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasColumnName("Restaurant")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.ToTable("Features", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FoodDrink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FeatureID");

                    b.ToTable("FoodDrinks", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FunProgram", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FeatureID");

                    b.ToTable("FunPrograms", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("Hotels", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Comment");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Rating");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BedCount")
                        .HasColumnType("INT")
                        .HasColumnName("BedCount");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Price");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("INT")
                        .HasColumnName("RoomNumber");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "HotelID", "RoomNumber" }, "RoomNumberUnique")
                        .IsUnique();

                    b.ToTable("Rooms", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.RoomImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("RoomImages", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FeatureID");

                    b.ToTable("Services", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Image")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "EmailUnique")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserBookRoom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("DATE")
                        .HasColumnName("CheckIn");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("DATE")
                        .HasColumnName("CheckOut");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBookRooms", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserReactHotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.HasIndex("UserID");

                    b.ToTable("UserReactHotels", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserWatchHotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.HasIndex("UserID");

                    b.ToTable("UserWatchHotels", "HotelBooking");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRole", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaim", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaim", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRole", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken", "Security");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Facility", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("Facilities")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FACILITY");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("Features")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_FEATURES");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FoodDrink", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FoodDrinks")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FOODDRINK");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FunProgram", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FunPrograms")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FUNPROGRAM");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Review", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("Reviews")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_REVIEWS");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_REVIEWS");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_ROOMS");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotel_Booking.Models.RoomImage", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ROOM_IMAGE");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Service", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("Services")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_SERVICE");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserBookRoom", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Room", "Room")
                        .WithMany("UserBookRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERBOOKROOM_BOOK_ROOM");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("UserBookRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USERBOOKROOM_BOOK_USER");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserReactHotel", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("UserReactHotels")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_USErREACTHotels");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("UserReactHotels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USER_REACT_HOTEL");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserWatchHotel", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("UserWatchHotels")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_USErWATCHHotels");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("UserWatchHotels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USER_WATCH_HOTEL");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hotel_Booking.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hotel_Booking.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_Booking.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hotel_Booking.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("FoodDrinks");

                    b.Navigation("FunPrograms");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Hotel", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");

                    b.Navigation("UserReactHotels");

                    b.Navigation("UserWatchHotels");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.Navigation("RoomImages");

                    b.Navigation("UserBookRooms");
                });

            modelBuilder.Entity("Hotel_Booking.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserBookRooms");

                    b.Navigation("UserReactHotels");

                    b.Navigation("UserWatchHotels");
                });
#pragma warning restore 612, 618
        }
    }
}
