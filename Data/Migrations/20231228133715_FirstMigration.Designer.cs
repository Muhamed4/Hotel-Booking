// <auto-generated />
using System;
using Hotel_Booking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel_Booking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231228133715_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("AirCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("AirCondition");

                    b.Property<bool>("AirportTransfer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("AirportTransfer");

                    b.Property<bool>("FontDesk247")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("FontDesk247");

                    b.Property<bool>("FreeBreakfast")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("FreeBreakfast");

                    b.Property<bool>("FreeParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("FreeParking");

                    b.Property<bool>("FreeWifi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("FreeWifi");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<bool>("LaundryFacility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("LaundryFacility");

                    b.Property<bool>("NoSmoking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("NoSmoking");

                    b.Property<bool>("Restaurant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("Restaurant");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.ToTable("Features", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFacility", b =>
                {
                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.HasKey("FeatureID", "Description");

                    b.ToTable("FeatureFacilities", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFoodDrink", b =>
                {
                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.HasKey("FeatureID", "Description");

                    b.ToTable("FeatureFoodDrinks", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFunProgram", b =>
                {
                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.HasKey("FeatureID", "Description");

                    b.ToTable("FeatureFunPrograms", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureService", b =>
                {
                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.HasKey("FeatureID", "Description");

                    b.ToTable("FeatureServices", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Hotel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Name");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Hotels", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Review", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Comment");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2(3)")
                        .HasColumnName("Date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Rating");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BedCount")
                        .HasColumnType("INT")
                        .HasColumnName("BedCount");

                    b.Property<DateTime?>("CheckIn")
                        .IsRequired()
                        .HasColumnType("DATETIME(3)")
                        .HasColumnName("CheckIn");

                    b.Property<DateTime?>("CheckOut")
                        .IsRequired()
                        .HasColumnType("DATETIME(3)")
                        .HasColumnName("CheckOut");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("Price");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("INT")
                        .HasColumnName("RoomNumber");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("HotelID");

                    b.HasIndex("UserID");

                    b.ToTable("Rooms", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.RoomImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("RoomImages", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Image")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("LastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("Password");

                    b.HasKey("ID");

                    b.ToTable("Users", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserReactHotel", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<bool>("Like")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("Like");

                    b.HasKey("UserID", "HotelID");

                    b.HasIndex("HotelID");

                    b.ToTable("UserReactHotels", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserWatchHotel", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<int>("WatchCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(0)
                        .HasColumnName("WatchCount");

                    b.HasKey("UserID", "HotelID");

                    b.HasIndex("HotelID");

                    b.ToTable("UserWatchHotels", "HotelBooking");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("ContainFeatures")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_FEATURES");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFacility", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FeatureFacilities")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FACILITY");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFoodDrink", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FeatureFoodDrinks")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FOODDRINK");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureFunProgram", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FeatureFunPrograms")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_FUNPROGRAM");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.FeatureService", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Feature", "Feature")
                        .WithMany("FeatureServices")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FEATURE_SERVICE");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Hotel", b =>
                {
                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("OwnHotels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_HOTEL");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Review", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("HasReviews")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_REVIEWS");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("MakeReviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_USER_REVIEWS");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("ConsistOfRooms")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_CONSISTSOF_ROOMS");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("BookRooms")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_USER_BOOK_ROOM");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.RoomImage", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ROOM_IMAGE");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserReactHotel", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("UserReactHotels")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_USER_REACT_HOTEL");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("UserReactHotels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USER_REACT_HOTEL");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.UserWatchHotel", b =>
                {
                    b.HasOne("Hotel_Booking.Models.Hotel", "Hotel")
                        .WithMany("UserWatchHotels")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HOTEL_USERWATCHHOTELS");

                    b.HasOne("Hotel_Booking.Models.User", "User")
                        .WithMany("UserWatchHotels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USERWATCHHOTELS");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Feature", b =>
                {
                    b.Navigation("FeatureFacilities");

                    b.Navigation("FeatureFoodDrinks");

                    b.Navigation("FeatureFunPrograms");

                    b.Navigation("FeatureServices");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Hotel", b =>
                {
                    b.Navigation("ConsistOfRooms");

                    b.Navigation("ContainFeatures");

                    b.Navigation("HasReviews");

                    b.Navigation("UserReactHotels");

                    b.Navigation("UserWatchHotels");
                });

            modelBuilder.Entity("Hotel_Booking.Models.Room", b =>
                {
                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("Hotel_Booking.Models.User", b =>
                {
                    b.Navigation("BookRooms");

                    b.Navigation("MakeReviews");

                    b.Navigation("OwnHotels");

                    b.Navigation("UserReactHotels");

                    b.Navigation("UserWatchHotels");
                });
#pragma warning restore 612, 618
        }
    }
}
